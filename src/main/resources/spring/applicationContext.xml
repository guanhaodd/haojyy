<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" 
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:util="http://www.springframework.org/schema/util" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd   
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
	<context:property-placeholder ignore-unresolvable="true" local-override="true" location="classpath*:/application.properties"/>

    <util:properties id="APP_PROPERTIES" location="classpath:application.properties" local-override="true"/>
   
     <!-- task任务扫描注解-->
	<task:annotation-driven/>  
	 
 	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="com.gh.app.corp.service,
    									  com.gh.app.corp.**.impl,
    									  com.gh.app.manage.service,
    									  com.gh.app.manage.**.impl,
    									  com.gh.app.phone.**.impl,
    									  com.gh.app.phone.service,
    									  com.gh.app.util.service,
    									  com.gh.app.util.**.impl,">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
	
	<!-- 配置数据源 -->
	<bean id="dataSource" name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" /> 
		<property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="3600" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />
	</bean>
	
 	<!-- JPA实体管理器工厂 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"> 
       <property name="dataSource" ref="dataSource"/>
       <property name="persistenceXmlLocation" value="classpath*:META-INF/persistence.xml"/>
       <property name="persistenceUnitName" value="appPersistUnit"/>
       <property name="packagesToScan" value="com.gh.app.**.bean"/>
       <property name="persistenceProvider" ref="persistenceProvider"/>
       <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>  
  	   <property name="jpaDialect" ref="jpaDialect"/>  
       <property name="jpaProperties">
	       <props>
			 <prop key="hibernate.dialect">${hibernate.dialect}</prop>
	         <prop key="hibernate.max_fetch_depth">3</prop>
	         <prop key="hibernate.jdbc.fetch_size">50</prop>
	         <prop key="hibernate.jdbc.batch_size">10</prop>
	         <prop key="hibernate.hbm2ddl.auto">update</prop>
	         <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
	         <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
	         <prop key="hibernate.id.new_generator_mappings">${hibernate.id.new_generator_mappings}</prop>
	         <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
	         <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
	         <prop key="javax.persistence.validation.mode">none</prop>
	         <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
	         <prop key="net.sf.ehcache.configurationResourceName">ehcache/ehcache-hibernate-local.xml</prop>
	         <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
	       </props>
      	</property>
    </bean>
    <!-- 用于指定持久化实现厂商类 -->
    <bean id="persistenceProvider" class="org.hibernate.jpa.HibernatePersistenceProvider"/>
    <!-- 用于设置JPA实现厂商的特定属性 -->
    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>  
    <!-- 用于指定一些高级特性 -->
    <bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>  
    <!-- Jpa 事务配置 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    
    <!-- 用于执行原生的SQL  -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    	
	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<bean class="com.gh.app.util.tool.context.SpringContextHolder" lazy-init="false" />

</beans>