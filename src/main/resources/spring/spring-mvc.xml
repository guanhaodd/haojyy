<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
       

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <!-- 默认的注解映射的支持 -->  
    <!-- org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser -->
    <mvc:annotation-driven conversion-service="conversionService" >
    	<mvc:message-converters register-defaults="false">
        <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
        <bean class="org.springframework.http.converter.StringHttpMessageConverter">
            <property name="supportedMediaTypes" value="text/plain;charset=UTF-8" />
        </bean>
        <!-- 避免IE出现下载JSON文件的情况 -->
        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
            <property name="supportedMediaTypes" value="text/plain;charset=UTF-8" />
        </bean>
		<bean class="org.springframework.http.converter.ResourceHttpMessageConverter" /><!-- 处理.. -->
		<bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter" /><!-- 处理.. -->
		<bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" /><!-- 处理.. -->
	    </mvc:message-converters>
    </mvc:annotation-driven>
	
	<!-- 自动扫描且只扫描@Controller -->
	<context:component-scan base-package="com.gh.app.**.controller" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<!-- 这里不加上这一句 controller 中调用service 数据无法保存成功!-->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" /> 
	</context:component-scan>

    <!-- 对模型视图名称的解析,在请求时模型视图名称添加前后缀 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/pages/" />      <!-- 前缀 -->
        <property name="suffix" value=".jsp" />   <!-- 后缀 -->
        <!-- 可以访问常量类的静态变量或者工具类的静态方法。 -->
		<property name="attributesMap" ref="constantsMap" />
    </bean>
    
    <!-- 定义时间转换格式 -->
	<bean id="conversionService"  class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
          <property name="converters">
             <set> <bean class="com.gh.app.util.tool.converter.StringToDateConverter"/> </set>
          </property>
	</bean>
    
    <!-- 定义一个Map -->
	<util:map id="constantsMap">
		<!-- 页面可以直接使用${constants.xxx} -->  
		<entry key="constants" value-ref="constantsBean"/>
		<!-- 页面可以直接使用${entities.xxx} -->
		<entry key="entities" value-ref="entitiesBean"/>
	</util:map> 
    
    <!-- 常量类Bean: Constants-->
	<bean name="constantsBean" class="com.gh.app.util.constants.Constants"></bean>
	<!-- 常量类Bean: Entities-->
	<bean name="entitiesBean" class="com.gh.app.util.entities.Entities"></bean>
	
    <!-- 支持上传文件 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		 <!-- one of the properties available; the maximum file size in bytes -->  
    	<property name="maxUploadSize" value="10240000"/>  
	</bean>
	
	<!-- MessageResolve -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>res.messages</value>
			</list>
		</property>
	</bean>
	
	<!-- 开启Shiro注解的Spring配置方式的beans。在lifecycleBeanPostProcessor之后运行 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	
	<bean id="lifecycleBeanPostProcessor"  class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- 总错误处理-->
    <bean id="exceptionHandler" class="com.gh.app.util.tool.exception.CustomExceptionHandler"/>
</beans>